using Content.Client.UserInterface.Controls;
using Content.Shared._FTL.Weapons;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;

namespace Content.Client._FTL.Weapons;

[GenerateTypedNameReferences]
public sealed partial class WeaponTargetingWindow : FancyWindow
{
    private WeaponTargetingBoundUserInterface _owner;

    public WeaponTargetingWindow(WeaponTargetingBoundUserInterface owner, EntityUid? mapUid, EntityCoordinates? coordinates, Angle? rotation, EntityUid? trackedEntity = null)
    {
        RobustXamlLoader.Load(this);
        _owner = owner;
        TargetingMapScreen.MapUid = mapUid;
        TargetingMapScreen.SetMatrix(coordinates, rotation);

        TargetingMapScreen.OnWeaponMapFire += args =>
        {
            if (mapUid != null)
                _owner.FireWeapon(args, mapUid.Value);
        };

        if (trackedEntity != null)
            TargetingMapScreen.TrackedCoordinates.Add(new EntityCoordinates(trackedEntity.Value, Vector2.Zero), (true, Color.Red));

        if (IoCManager.Resolve<IEntityManager>().TryGetComponent<MetaDataComponent>(mapUid, out var metadata))
        {
            Title = metadata.EntityName;
        }
    }

    public void ChangeGrid(EntityUid gridUid)
    {
        TargetingMapScreen.MapUid = gridUid;
    }

    public void UpdateState(WeaponTargetingUserInterfaceState state)
    {
        TargetingMapScreen.FireButton.Disabled = !state.CanFire;
        TargetingMapScreen.MapUids = state.MapUids;
    }
}
