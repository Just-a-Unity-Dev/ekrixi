using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared._FTL.ShipWeapons;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Input;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
namespace Content.Client._FTL.ShipWeapons;

[GenerateTypedNameReferences]
public sealed partial class GunnerConsoleWindow : FancyWindow,
    IComputerWindow<GunnerConsoleBoundInterfaceState>
{
    public event Action<EntityCoordinates>? OnRadarClick;
    public event Action? OnFireClick;
    public event Action? OnEjectClick;
    public event Action? OnAutofireClick;
    public event Action? OnChamberClick;

    public GunnerConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        // IoCManager.InjectDependencies(this);

        WorldRangeChange(RadarScreen.WorldRange);
        RadarScreen.WorldRangeChanged += WorldRangeChange;
        RadarScreen.OnRadarClick += coordinates => { OnRadarClick?.Invoke(coordinates); };

        FireButton.OnButtonDown += _ => { OnFireClick?.Invoke(); };
        EjectButton.OnButtonDown += _ => { OnEjectClick?.Invoke(); };
        ChamberButton.OnButtonDown += _ => { OnChamberClick?.Invoke(); };
        AutofireButton.OnButtonDown += _ => { OnAutofireClick?.Invoke(); };
    }

    private void WorldRangeChange(float value)
    {
        RadarRange.Text = $"{value:0}";
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        RadarScreen.SetMatrix(coordinates, angle);
    }

    public void UpdateState(GunnerConsoleBoundInterfaceState scc)
    {
        // update the radar
        RadarScreen.UpdateState(scc.State);

        // update ammo text
        AmmoCounter.Text = scc.CurrentAmmo <= 0 ? Loc.GetString("gunner-console-no-ammo") : $"{scc.CurrentAmmo}/{scc.MaxAmmo}";
        // MaxRadarRange.Text = $"{scc.MaxRange:0}";
    }
}
