using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using Content.Client.ContextMenu.UI;
using Content.Client.Examine;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.Verbs;
using Content.Client.Verbs.UI;
using Content.Shared.Input;
using Content.Shared.Tag;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Map;
using Serilog;

namespace Content.Client.Guidebook.Controls;

/// <summary>
///     Adds a singular band of color alongside a caption.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class GuideColorLabelBand : BoxContainer, IDocumentTag
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    [Dependency] private readonly IUserInterfaceManager _ui = default!;

    private readonly TagSystem _tagSystem;
    private readonly GuidebookSystem _guidebookSystem;

    public SpriteComponent? Sprite
    {
        get => View.Sprite;
        set => View.Sprite = value;
    }

    public Vector2 Scale
    {
        get => View.Scale;
        set => View.Scale = value;
    }

    public GuideColorLabelBand()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _tagSystem = _systemManager.GetEntitySystem<TagSystem>();
        _guidebookSystem = _systemManager.GetEntitySystem<GuidebookSystem>();
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideColorLabelBand(string caption, Color color, float? height) : this()
    {
        NameLabel.SetMarkup(caption);
        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = color
        };
        if (height.HasValue)
            NameBackground.MinHeight = height.Value;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (Sprite is not null)
            _entityManager.DeleteEntity(Sprite.Owner);
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Caption", out var caption))
        {
            Logger.Error("Caption doesn't exist!");
            return false;
        }

        if (!args.TryGetValue("Color", out var colorString))
        {
            Logger.Error($"Specified color \"{colorString}\" is not a valid color!");
            return false;
        }

        if (args.TryGetValue("Height", out var desiredHeight))
        {
            NameBackground.MinHeight = float.Parse(desiredHeight);
        }

        // set background
        var color = Color.FromHex(colorString);

        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = color
        };
        // sssttttttrrrrrrreeeeeeeeeeeeettttttttttcccccccccchhhhhhhhhhh
        NameBackground.MinWidth = 10000000f;
        NameBackground.HorizontalAlignment = HAlignment.Stretch;

        // center text
        NameLabel.HorizontalAlignment = HAlignment.Center;
        NameLabel.VerticalAlignment = VAlignment.Center;

        // make text darker if we have a bright background
        if ((color.R + color.G + color.B) > 1.5f)
            NameLabel.SetMarkup("[color=#000000]" + caption);
        else
            NameLabel.SetMarkup(caption);
        control = this;
        return true;
    }
}
